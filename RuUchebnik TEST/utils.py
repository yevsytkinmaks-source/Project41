# -*- coding: utf-8 -*-
"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è Telegram –±–æ—Ç–∞ RU–£—á–µ–±–Ω–∏–∫
–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ª–∏–º–∏—Ç–æ–≤, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –¥—Ä—É–≥–∏—Ö –æ–±—â–∏—Ö –∑–∞–¥–∞—á

–ê–≤—Ç–æ—Ä: –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã RU–£—á–µ–±–Ω–∏–∫
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import logging
import asyncio
import hashlib
import time
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, List, Union
from pathlib import Path

from config import BOT_CONFIG, LOGGING_CONFIG
from database import DatabaseManager


# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è rate limiting
_rate_limit_storage: Dict[int, List[float]] = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –±–æ—Ç–∞
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç, —É—Ä–æ–≤–µ–Ω—å –∏ –∫–æ–¥–∏—Ä–æ–≤–∫—É –ª–æ–≥–æ–≤
    """
    logging.basicConfig(
        level=getattr(logging, LOGGING_CONFIG['level']),
        format=LOGGING_CONFIG['format'],
        datefmt=LOGGING_CONFIG['date_format'],
        encoding=LOGGING_CONFIG.get('encoding', 'utf-8'),
        handlers=[
            logging.StreamHandler(),  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
            logging.FileHandler('bot.log', encoding='utf-8')  # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
        ]
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è HTTP –±–∏–±–ª–∏–æ—Ç–µ–∫
    logging.getLogger('httpx').setLevel(logging.WARNING)
    logging.getLogger('aiogram.event').setLevel(logging.WARNING)
    
    logger = logging.getLogger(__name__)
    logger.info("üîß –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")


def format_file_size(size_bytes: Optional[Union[int, float]]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
    
    Args:
        size_bytes: –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, "15.2 –ú–ë")
    """
    if not size_bytes or size_bytes <= 0:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ä–∞–∑–º–µ—Ä–æ–≤
    size_names = ["–ë", "–ö–ë", "–ú–ë", "–ì–ë", "–¢–ë"]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è
    size = float(size_bytes)
    unit_index = 0
    
    while size >= 1024.0 and unit_index < len(size_names) - 1:
        size /= 1024.0
        unit_index += 1
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –Ω—É–∂–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    if unit_index == 0:  # –ë–∞–π—Ç—ã - –±–µ–∑ –¥—Ä–æ–±–Ω–æ–π —á–∞—Å—Ç–∏
        return f"{int(size)} {size_names[unit_index]}"
    else:
        return f"{size:.1f} {size_names[unit_index]}"


async def is_rate_limited(user_id: int, max_requests: Optional[int] = None, 
                         window_seconds: Optional[int] = None) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        max_requests: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ (–∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ)
        window_seconds: –û–∫–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ)
        
    Returns:
        bool: True –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç, False –µ—Å–ª–∏ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å
    """
    global _rate_limit_storage
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if max_requests is None:
        max_requests = BOT_CONFIG['rate_limit_requests']
    if window_seconds is None:
        window_seconds = BOT_CONFIG['rate_limit_window']
    
    current_time = time.time()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_requests = _rate_limit_storage.get(user_id, [])
    
    # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞
    cutoff_time = current_time - window_seconds
    user_requests = [req_time for req_time in user_requests if req_time > cutoff_time]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
    if len(user_requests) >= max_requests:
        return True
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
    user_requests.append(current_time)
    _rate_limit_storage[user_id] = user_requests
    
    return False


def get_rate_limit_reset_time(user_id: int) -> Optional[datetime]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        
    Returns:
        Optional[datetime]: –í—Ä–µ–º—è —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞ –∏–ª–∏ None –µ—Å–ª–∏ –ª–∏–º–∏—Ç –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω
    """
    global _rate_limit_storage
    
    user_requests = _rate_limit_storage.get(user_id, [])
    if not user_requests:
        return None
    
    # –í—Ä–µ–º—è —Å–±—Ä–æ—Å–∞ = –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ + –æ–∫–Ω–æ –ª–∏–º–∏—Ç–∞
    oldest_request = min(user_requests)
    reset_time = datetime.fromtimestamp(oldest_request + BOT_CONFIG['rate_limit_window'])
    
    return reset_time if reset_time > datetime.now() else None


async def log_user_action(db: DatabaseManager, user_id: str, action: str, 
                         details: Optional[Dict[str, Any]] = None):
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ
    
    Args:
        db: –≠–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        action: –û–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –¥–µ–π—Å—Ç–≤–∏—è
    """
    try:
        await db.log_system_event(
            event_type="info",
            action=action,
            details=details or {},
            user_id=user_id
        )
    except Exception as e:
        logger = logging.getLogger(__name__)
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")


def format_datetime(dt: datetime, include_time: bool = True, 
                   include_seconds: bool = False) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    Args:
        dt: –û–±—ä–µ–∫—Ç datetime –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        include_time: –í–∫–ª—é—á–∞—Ç—å –ª–∏ –≤—Ä–µ–º—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        include_seconds: –í–∫–ª—é—á–∞—Ç—å –ª–∏ —Å–µ–∫—É–Ω–¥—ã (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ include_time=True)
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞/–≤—Ä–µ–º—è
    """
    if not include_time:
        return dt.strftime("%d.%m.%Y")
    
    time_format = "%H:%M:%S" if include_seconds else "%H:%M"
    return dt.strftime(f"%d.%m.%Y {time_format}")


def format_duration(seconds: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
    
    Args:
        seconds: –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    """
    if seconds < 60:
        return f"{seconds} —Å–µ–∫"
    elif seconds < 3600:
        minutes = seconds // 60
        return f"{minutes} –º–∏–Ω"
    elif seconds < 86400:
        hours = seconds // 3600
        minutes = (seconds % 3600) // 60
        return f"{hours}—á {minutes}–º"
    else:
        days = seconds // 86400
        hours = (seconds % 86400) // 3600
        return f"{days}–¥ {hours}—á"


def create_file_hash(file_path: Union[str, Path], algorithm: str = 'md5') -> str:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Ö–µ—à–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
    
    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        algorithm: –ê–ª–≥–æ—Ä–∏—Ç–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è ('md5', 'sha1', 'sha256')
        
    Returns:
        str: –•–µ—à —Ñ–∞–π–ª–∞ –≤ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        
    Raises:
        FileNotFoundError: –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
        ValueError: –ï—Å–ª–∏ –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
    """
    file_path = Path(file_path)
    
    if not file_path.exists():
        raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
    
    # –í—ã–±–∏—Ä–∞–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    if algorithm == 'md5':
        hash_obj = hashlib.md5()
    elif algorithm == 'sha1':
        hash_obj = hashlib.sha1()
    elif algorithm == 'sha256':
        hash_obj = hashlib.sha256()
    else:
        raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º: {algorithm}")
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –ø–æ —á–∞—Å—Ç—è–º –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
    with open(file_path, 'rb') as f:
        for chunk in iter(lambda: f.read(8192), b""):
            hash_obj.update(chunk)
    
    return hash_obj.hexdigest()


def validate_file_type(file_path: Union[str, Path], 
                      allowed_extensions: Optional[List[str]] = None) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
    
    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        allowed_extensions: –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π (–∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ)
        
    Returns:
        bool: True –µ—Å–ª–∏ —Ç–∏–ø —Ñ–∞–π–ª–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω
    """
    if allowed_extensions is None:
        from config import FILE_CONFIG
        allowed_extensions = FILE_CONFIG['allowed_extensions']
    
    file_path = Path(file_path)
    file_extension = file_path.suffix.lower()
    
    return file_extension in [ext.lower() for ext in allowed_extensions]


def sanitize_filename(filename: str) -> str:
    """
    –û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    
    Args:
        filename: –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        
    Returns:
        str: –û—á–∏—â–µ–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    """
    # –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –∑–∞–º–µ–Ω–∏—Ç—å
    invalid_chars = '<>:"/\\|?*'
    
    # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ
    for char in invalid_chars:
        filename = filename.replace(char, '_')
    
    # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –∏ –ø—Ä–æ–±–µ–ª—ã
    filename = '_'.join(filename.split())
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    if len(filename) > 200:
        name_part, ext_part = filename.rsplit('.', 1) if '.' in filename else (filename, '')
        max_name_length = 200 - len(ext_part) - 1 if ext_part else 200
        filename = f"{name_part[:max_name_length]}.{ext_part}" if ext_part else name_part[:200]
    
    return filename


async def cleanup_rate_limit_storage(max_age_hours: int = 24):
    """
    –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ª–∏–º–∏—Ç–æ–≤
    
    Args:
        max_age_hours: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∑–∞–ø–∏—Å–µ–π –≤ —á–∞—Å–∞—Ö
    """
    global _rate_limit_storage
    
    cutoff_time = time.time() - (max_age_hours * 3600)
    
    users_to_remove = []
    for user_id, requests in _rate_limit_storage.items():
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        recent_requests = [req_time for req_time in requests if req_time > cutoff_time]
        
        if recent_requests:
            _rate_limit_storage[user_id] = recent_requests
        else:
            users_to_remove.append(user_id)
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –Ω–µ–¥–∞–≤–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    for user_id in users_to_remove:
        del _rate_limit_storage[user_id]
    
    logger = logging.getLogger(__name__)
    if users_to_remove:
        logger.info(f"üßπ –û—á–∏—â–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è {len(users_to_remove)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")


def format_number(number: int, use_thousands_separator: bool = True) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    Args:
        number: –ß–∏—Å–ª–æ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        use_thousands_separator: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Ç—ã—Å—è—á
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ
    """
    if use_thousands_separator:
        return f"{number:,}".replace(",", " ")
    else:
        return str(number)


def truncate_text(text: str, max_length: int, suffix: str = "...") -> str:
    """
    –û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å—É—Ñ—Ñ–∏–∫—Å–∞
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        suffix: –°—É—Ñ—Ñ–∏–∫—Å –¥–ª—è –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        
    Returns:
        str: –û–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    if len(text) <= max_length:
        return text
    
    # –£—á–∏—Ç—ã–≤–∞–µ–º –¥–ª–∏–Ω—É —Å—É—Ñ—Ñ–∏–∫—Å–∞
    truncate_at = max_length - len(suffix)
    if truncate_at <= 0:
        return suffix[:max_length]
    
    return text[:truncate_at] + suffix


def get_user_display_name(first_name: Optional[str], last_name: Optional[str], 
                         username: Optional[str]) -> str:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        first_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        last_name: –§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        
    Returns:
        str: –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if first_name and last_name:
        return f"{first_name} {last_name}"
    elif first_name:
        return first_name
    elif username:
        return f"@{username}"
    else:
        return "–ë–µ–∑ –∏–º–µ–Ω–∏"


async def safe_delete_file(file_path: Union[str, Path]) -> bool:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    
    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        
    Returns:
        bool: True –µ—Å–ª–∏ —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    """
    try:
        file_path = Path(file_path)
        if file_path.exists():
            file_path.unlink()
            return True
        return True  # –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ —É—Å–ø–µ—Ö–æ–º
    except Exception as e:
        logger = logging.getLogger(__name__)
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return False


def create_pagination_text(current_page: int, total_pages: int, 
                          items_per_page: int, total_items: int) -> str:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    
    Args:
        current_page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1)
        total_pages: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        items_per_page: –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        total_items: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        
    Returns:
        str: –¢–µ–∫—Å—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    """
    start_item = (current_page - 1) * items_per_page + 1
    end_item = min(current_page * items_per_page, total_items)
    
    return f"–ü–æ–∫–∞–∑–∞–Ω–æ {start_item}-{end_item} –∏–∑ {total_items} | –°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page} –∏–∑ {total_pages}"


# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ª–∏–º–∏—Ç–æ–≤
async def start_periodic_cleanup():
    """
    –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    """
    logger = logging.getLogger(__name__)
    logger.info("üîÑ –ó–∞–ø—É—â–µ–Ω–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    while True:
        try:
            await cleanup_rate_limit_storage()
            # –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
            await asyncio.sleep(6 * 3600)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–µ: {e}")
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –º–µ–Ω—å—à–µ –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
            await asyncio.sleep(1800)  # 30 –º–∏–Ω—É—Ç


def escape_markdown(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Markdown —Ä–∞–∑–º–µ—Ç–∫–∏ –≤ Telegram
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        
    Returns:
        str: –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    escape_chars = '_*[]()~`>#+-=|{}.!'
    for char in escape_chars:
        text = text.replace(char, f'\\{char}')
    return text


def escape_html(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è HTML —Ä–∞–∑–º–µ—Ç–∫–∏ –≤ Telegram
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        
    Returns:
        str: –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    return (text
            .replace('&', '&amp;')
            .replace('<', '&lt;')
            .replace('>', '&gt;'))
