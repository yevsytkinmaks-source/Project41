#!/usr/bin/env python3
"""
RU–£—á–µ–±–Ω–∏–∫ Bot Runner
–ì–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã: Telegram –±–æ—Ç + –≤–µ–±-–ø–∞–Ω–µ–ª—å
"""

import os
import sys
import subprocess
import signal
import time
import asyncio
import threading
import logging
from datetime import datetime
from typing import Optional, List

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('ruuchebnik.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

class RUUchebnikRunner:
    """–£–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–æ–º –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.processes: List[subprocess.Popen] = []
        self.running = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.check_environment()
        
    def check_environment(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        required_vars = [
            'BOT_TOKEN',
            'DATABASE_URL',
            'ADMIN_ID'
        ]
        
        missing_vars = []
        for var in required_vars:
            if not os.getenv(var):
                missing_vars.append(var)
        
        if missing_vars:
            logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
            logger.info("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏:")
            logger.info("BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞")
            logger.info("DATABASE_URL=postgresql://user:password@host:port/database")
            logger.info("ADMIN_ID=–≤–∞—à_telegram_id")
            logger.info("ADMIN_PASSWORD=–ø–∞—Ä–æ–ª—å_–∞–¥–º–∏–Ω_–ø–∞–Ω–µ–ª–∏")
            sys.exit(1)
    
    def start_web_server(self):
        """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
        logger.info("üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ node_modules
            if not os.path.exists('node_modules'):
                logger.info("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Node.js...")
                subprocess.run(['npm', 'install'], check=True)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
            process = subprocess.Popen(
                ['npm', 'run', 'dev'],
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                universal_newlines=True,
                env={**os.environ, 'PORT': '5000'}
            )
            
            self.processes.append(process)
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–≤–æ–¥–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            threading.Thread(
                target=self._monitor_process_output,
                args=(process, "WEB"),
                daemon=True
            ).start()
            
            logger.info("‚úÖ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:5000")
            return True
            
        except subprocess.CalledProcessError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return False
        except FileNotFoundError:
            logger.error("‚ùå Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Node.js 18+")
            return False
    
    def start_telegram_bot(self):
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            try:
                import telegram
                import asyncpg
            except ImportError as e:
                logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {e}")
                logger.info("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
                return False
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            bot_script = os.path.join('bot', 'telegram_bot.py')
            if not os.path.exists(bot_script):
                logger.error(f"‚ùå –§–∞–π–ª –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {bot_script}")
                return False
            
            process = subprocess.Popen(
                [sys.executable, bot_script],
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                universal_newlines=True
            )
            
            self.processes.append(process)
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–≤–æ–¥–∞ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            threading.Thread(
                target=self._monitor_process_output,
                args=(process, "BOT"),
                daemon=True
            ).start()
            
            logger.info("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞: {e}")
            return False
    
    def _monitor_process_output(self, process: subprocess.Popen, prefix: str):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–≤–æ–¥–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        try:
            for line in iter(process.stdout.readline, ''):
                if line.strip():
                    logger.info(f"[{prefix}] {line.strip()}")
                if process.poll() is not None:
                    break
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ {prefix}: {e}")
        
        # –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
        if process.poll() is not None:
            logger.warning(f"[{prefix}] –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {process.poll()}")
    
    def setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        def signal_handler(signum, frame):
            logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            self.stop()
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ RU–£—á–µ–±–Ω–∏–∫ —Å–∏—Å—Ç–µ–º—ã...")
        logger.info(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        self.setup_signal_handlers()
        self.running = True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        web_started = self.start_web_server()
        bot_started = self.start_telegram_bot()
        
        if not web_started and not bot_started:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∏ –æ–¥–∏–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç!")
            return False
        
        logger.info("üéâ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞!")
        logger.info("üåê –í–µ–± –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: http://localhost:5000")
        logger.info("üîë –ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: 14101988")
        logger.info("ü§ñ Telegram –±–æ—Ç: —Ä–∞–±–æ—Ç–∞–µ—Ç")
        logger.info("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª–µ ruuchebnik.log")
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        try:
            while self.running and any(p.poll() is None for p in self.processes):
                time.sleep(1)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
                for i, process in enumerate(self.processes):
                    if process.poll() is not None:
                        component = "WEB" if i == 0 else "BOT"
                        logger.warning(f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç {component} –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è")
                        
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è...")
        
        self.stop()
        return True
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
        self.running = False
        
        for i, process in enumerate(self.processes):
            if process.poll() is None:
                component = "WEB" if i == 0 else "BOT"
                logger.info(f"–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º {component}...")
                
                try:
                    process.terminate()
                    process.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    logger.warning(f"–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ {component}...")
                    process.kill()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ {component}: {e}")
        
        self.processes.clear()
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    def status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        print("üìä –°—Ç–∞—Ç—É—Å RU–£—á–µ–±–Ω–∏–∫ —Å–∏—Å—Ç–µ–º—ã")
        print("=" * 40)
        print(f"–ó–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {len([p for p in self.processes if p.poll() is None])}")
        
        for i, process in enumerate(self.processes):
            component = "WEB-–°–ï–†–í–ï–†" if i == 0 else "TELEGRAM-–ë–û–¢"
            status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if process.poll() is None else "‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            print(f"{component}: {status}")
        
        if self.processes:
            print("\nüåê –í–µ–± –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: http://localhost:5000")
            print("üîë –ü–∞—Ä–æ–ª—å: 14101988")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) > 1 and sys.argv[1] == '--status':
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        print("–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –≤–µ–± –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
        return
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    print("=" * 60)
    print("üéì RU–£—á–µ–±–Ω–∏–∫ - –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π Telegram –±–æ—Ç")
    print("üìö –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∫–æ–ª—å–Ω—ã–º–∏ —É—á–µ–±–Ω–∏–∫–∞–º–∏")
    print("=" * 60)
    print()
    
    runner = RUUchebnikRunner()
    
    try:
        runner.start()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
