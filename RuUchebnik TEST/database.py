# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö PostgreSQL
–°–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, —É—á–µ–±–Ω–∏–∫–∞–º–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π

–ê–≤—Ç–æ—Ä: –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã RU–£—á–µ–±–Ω–∏–∫
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any
import asyncpg
from asyncpg import Pool, Connection

from config import BOT_CONFIG


class DatabaseManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö PostgreSQL"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.pool: Optional[Pool] = None
        self.logger = logging.getLogger(__name__)
        self.database_url = BOT_CONFIG['database_url']
        
        if not self.database_url:
            raise ValueError("DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    
    async def initialize(self) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        
        Raises:
            Exception: –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        """
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            self.pool = await asyncpg.create_pool(
                self.database_url,
                min_size=1,
                max_size=10,
                command_timeout=30,
                server_settings={'application_name': 'ruuchebnik_bot'}
            )
            
            self.logger.info("‚úÖ –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            async with self.pool.acquire() as connection:
                version = await connection.fetchval('SELECT version()')
                self.logger.info(f"üìä –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫: {version.split(',')[0]}")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
    
    async def close(self) -> None:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        if self.pool:
            await self.pool.close()
            self.logger.info("üìä –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç")
    
    # =============================================================================
    # –†–ê–ë–û–¢–ê –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò –ë–û–¢–ê
    # =============================================================================
    
    async def get_or_create_user(self, telegram_id: int, username: Optional[str] = None, 
                                first_name: Optional[str] = None, 
                                last_name: Optional[str] = None) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞
        
        Args:
            telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram (–±–µ–∑ @)
            first_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            last_name: –§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Dict: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        async with self.pool.acquire() as connection:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            user = await connection.fetchrow(
                "SELECT * FROM bot_users WHERE telegram_id = $1",
                str(telegram_id)
            )
            
            if user:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                await connection.execute("""
                    UPDATE bot_users 
                    SET username = $2, first_name = $3, last_name = $4, 
                        last_activity_at = CURRENT_TIMESTAMP 
                    WHERE telegram_id = $1
                """, str(telegram_id), username, first_name, last_name)
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                user = await connection.fetchrow(
                    "SELECT * FROM bot_users WHERE telegram_id = $1",
                    str(telegram_id)
                )
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = await connection.fetchrow("""
                    INSERT INTO bot_users (telegram_id, username, first_name, last_name)
                    VALUES ($1, $2, $3, $4)
                    RETURNING *
                """, str(telegram_id), username, first_name, last_name)
                
                self.logger.info(f"üë§ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id} (@{username})")
            
            return dict(user) if user else {}
    
    async def update_user_activity(self, telegram_id: int) -> None:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        """
        async with self.pool.acquire() as connection:
            await connection.execute(
                "UPDATE bot_users SET last_activity_at = CURRENT_TIMESTAMP WHERE telegram_id = $1",
                str(telegram_id)
            )
    
    async def is_user_blocked(self, telegram_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        
        Args:
            telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        """
        async with self.pool.acquire() as connection:
            result = await connection.fetchval(
                "SELECT is_blocked FROM bot_users WHERE telegram_id = $1",
                str(telegram_id)
            )
            return bool(result)
    
    async def increment_user_downloads(self, telegram_id: int) -> None:
        """
        –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        """
        async with self.pool.acquire() as connection:
            await connection.execute("""
                UPDATE bot_users 
                SET download_count = download_count + 1,
                    last_activity_at = CURRENT_TIMESTAMP
                WHERE telegram_id = $1
            """, str(telegram_id))
    
    # =============================================================================
    # –†–ê–ë–û–¢–ê –° –£–ß–ï–ë–ù–ò–ö–ê–ú–ò
    # =============================================================================
    
    async def get_classes(self) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
        
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–æ–≤
        """
        async with self.pool.acquire() as connection:
            rows = await connection.fetch("""
                SELECT * FROM classes 
                WHERE is_active = true 
                ORDER BY display_order
            """)
            return [dict(row) for row in rows]
    
    async def get_subjects_by_class(self, class_id: str) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
        
        Args:
            class_id: ID –∫–ª–∞—Å—Å–∞
            
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        """
        async with self.pool.acquire() as connection:
            rows = await connection.fetch("""
                SELECT DISTINCT s.* FROM subjects s
                JOIN textbooks t ON t.subject_id = s.id
                WHERE t.class_id = $1 AND t.is_active = true AND s.is_active = true
                ORDER BY s.display_order
            """, class_id)
            return [dict(row) for row in rows]
    
    async def get_textbooks(self, class_id: str, subject_id: str) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–µ–±–Ω–∏–∫–æ–≤ –ø–æ –∫–ª–∞—Å—Å—É –∏ –ø—Ä–µ–¥–º–µ—Ç—É
        
        Args:
            class_id: ID –∫–ª–∞—Å—Å–∞
            subject_id: ID –ø—Ä–µ–¥–º–µ—Ç–∞
            
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ —É—á–µ–±–Ω–∏–∫–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–≤—Ç–æ—Ä–∞—Ö
        """
        async with self.pool.acquire() as connection:
            rows = await connection.fetch("""
                SELECT 
                    t.*,
                    a.full_name as author_name,
                    a.short_name as author_short_name,
                    c.name as class_name,
                    s.name as subject_name
                FROM textbooks t
                LEFT JOIN authors a ON t.author_id = a.id
                LEFT JOIN classes c ON t.class_id = c.id  
                LEFT JOIN subjects s ON t.subject_id = s.id
                WHERE t.class_id = $1 AND t.subject_id = $2 AND t.is_active = true
                ORDER BY t.title, t.uploaded_at DESC
            """, class_id, subject_id)
            return [dict(row) for row in rows]
    
    async def get_textbook(self, textbook_id: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—á–µ–±–Ω–∏–∫–µ –ø–æ ID
        
        Args:
            textbook_id: ID —É—á–µ–±–Ω–∏–∫–∞
            
        Returns:
            Optional[Dict]: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–µ–±–Ω–∏–∫–µ –∏–ª–∏ None
        """
        async with self.pool.acquire() as connection:
            row = await connection.fetchrow("""
                SELECT 
                    t.*,
                    a.full_name as author_name,
                    a.short_name as author_short_name,
                    c.name as class_name,
                    s.name as subject_name
                FROM textbooks t
                LEFT JOIN authors a ON t.author_id = a.id
                LEFT JOIN classes c ON t.class_id = c.id
                LEFT JOIN subjects s ON t.subject_id = s.id
                WHERE t.id = $1 AND t.is_active = true
            """, textbook_id)
            return dict(row) if row else None
    
    async def increment_textbook_downloads(self, textbook_id: str) -> None:
        """
        –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π —É—á–µ–±–Ω–∏–∫–∞
        
        Args:
            textbook_id: ID —É—á–µ–±–Ω–∏–∫–∞
        """
        async with self.pool.acquire() as connection:
            await connection.execute(
                "UPDATE textbooks SET download_count = download_count + 1 WHERE id = $1",
                textbook_id
            )
    
    async def search_textbooks(self, query: str, limit: int = 20) -> List[Dict[str, Any]]:
        """
        –ü–æ–∏—Å–∫ —É—á–µ–±–Ω–∏–∫–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            List[Dict]: –ù–∞–π–¥–µ–Ω–Ω—ã–µ —É—á–µ–±–Ω–∏–∫–∏
        """
        async with self.pool.acquire() as connection:
            rows = await connection.fetch("""
                SELECT 
                    t.*,
                    a.full_name as author_name,
                    a.short_name as author_short_name,
                    c.name as class_name,
                    s.name as subject_name
                FROM textbooks t
                LEFT JOIN authors a ON t.author_id = a.id
                LEFT JOIN classes c ON t.class_id = c.id
                LEFT JOIN subjects s ON t.subject_id = s.id
                WHERE t.is_active = true 
                    AND (
                        LOWER(t.title) LIKE LOWER($1) 
                        OR LOWER(a.full_name) LIKE LOWER($1)
                        OR LOWER(a.short_name) LIKE LOWER($1)
                    )
                ORDER BY t.download_count DESC, t.title
                LIMIT $2
            """, f"%{query}%", limit)
            return [dict(row) for row in rows]
    
    # =============================================================================
    # –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –°–ö–ê–ß–ò–í–ê–ù–ò–ô
    # =============================================================================
    
    async def log_download(self, user_id: str, textbook_id: str, 
                          ip_address: Optional[str] = None) -> None:
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —É—á–µ–±–Ω–∏–∫–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            textbook_id: ID —É—á–µ–±–Ω–∏–∫–∞
            ip_address: IP –∞–¥—Ä–µ—Å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        async with self.pool.acquire() as connection:
            await connection.execute("""
                INSERT INTO downloads (user_id, textbook_id, ip_address)
                VALUES ($1, $2, $3)
            """, user_id, textbook_id, ip_address)
    
    # =============================================================================
    # –°–¢–ê–¢–ò–°–¢–ò–ö–ê
    # =============================================================================
    
    async def get_bot_statistics(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞
        
        Returns:
            Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        """
        async with self.pool.acquire() as connection:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats = {}
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            stats['total_users'] = await connection.fetchval(
                "SELECT COUNT(*) FROM bot_users"
            )
            
            # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–µ–≥–æ–¥–Ω—è
            today = datetime.now().date()
            stats['active_today'] = await connection.fetchval(
                "SELECT COUNT(*) FROM bot_users WHERE DATE(last_activity_at) = $1",
                today
            )
            
            # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            week_ago = datetime.now() - timedelta(days=7)
            stats['new_users_week'] = await connection.fetchval(
                "SELECT COUNT(*) FROM bot_users WHERE registered_at >= $1",
                week_ago
            )
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–±–Ω–∏–∫–æ–≤
            stats['total_textbooks'] = await connection.fetchval(
                "SELECT COUNT(*) FROM textbooks WHERE is_active = true"
            )
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π
            stats['total_downloads'] = await connection.fetchval(
                "SELECT SUM(download_count) FROM textbooks"
            )
            
            # –°–∫–∞—á–∏–≤–∞–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è
            stats['downloads_today'] = await connection.fetchval(
                "SELECT COUNT(*) FROM downloads WHERE DATE(downloaded_at) = $1",
                today
            )
            
            # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã (—Ç–æ–ø 5)
            popular_subjects = await connection.fetch("""
                SELECT s.name, SUM(t.download_count) as downloads
                FROM subjects s
                JOIN textbooks t ON t.subject_id = s.id
                WHERE t.is_active = true
                GROUP BY s.id, s.name
                ORDER BY downloads DESC
                LIMIT 5
            """)
            stats['popular_subjects'] = [dict(row) for row in popular_subjects]
            
            return stats
    
    async def get_user_statistics(self, telegram_id: int) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            
        Returns:
            Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        async with self.pool.acquire() as connection:
            user_stats = {}
            user_id = await connection.fetchval(
                "SELECT id FROM bot_users WHERE telegram_id = $1",
                str(telegram_id)
            )
            
            if not user_id:
                return {}
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_stats['total_downloads'] = await connection.fetchval(
                "SELECT download_count FROM bot_users WHERE id = $1",
                user_id
            )
            
            # –°–∫–∞—á–∏–≤–∞–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            today = datetime.now().date()
            user_stats['downloads_today'] = await connection.fetchval(
                "SELECT COUNT(*) FROM downloads WHERE user_id = $1 AND DATE(downloaded_at) = $2",
                user_id, today
            )
            
            # –õ—é–±–∏–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            favorite_subjects = await connection.fetch("""
                SELECT s.name, COUNT(*) as count
                FROM downloads d
                JOIN textbooks t ON d.textbook_id = t.id
                JOIN subjects s ON t.subject_id = s.id
                WHERE d.user_id = $1
                GROUP BY s.id, s.name
                ORDER BY count DESC
                LIMIT 3
            """, user_id)
            user_stats['favorite_subjects'] = [dict(row) for row in favorite_subjects]
            
            return user_stats
    
    # =============================================================================
    # –°–ò–°–¢–ï–ú–ù–´–ï –õ–û–ì–ò
    # =============================================================================
    
    async def log_system_event(self, event_type: str, action: str, 
                              details: Optional[Dict] = None, 
                              user_id: Optional[str] = None) -> None:
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
        
        Args:
            event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è (info, warning, error)
            action: –û–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
            details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
        """
        async with self.pool.acquire() as connection:
            await connection.execute("""
                INSERT INTO system_logs (type, action, details, user_id)
                VALUES ($1, $2, $3, $4)
            """, event_type, action, details, user_id)
    
    # =============================================================================
    # –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–´–ï –§–£–ù–ö–¶–ò–ò
    # =============================================================================
    
    async def get_all_user_ids(self) -> List[int]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        
        Returns:
            List[int]: –°–ø–∏—Å–æ–∫ telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        async with self.pool.acquire() as connection:
            rows = await connection.fetch(
                "SELECT telegram_id FROM bot_users WHERE is_blocked = false"
            )
            return [int(row['telegram_id']) for row in rows]
    
    async def block_user(self, telegram_id: int, reason: str = "") -> bool:
        """
        –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            reason: –ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        """
        async with self.pool.acquire() as connection:
            result = await connection.execute(
                "UPDATE bot_users SET is_blocked = true WHERE telegram_id = $1",
                str(telegram_id)
            )
            
            if result != "UPDATE 0":
                await self.log_system_event(
                    "warning", 
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
                    {"reason": reason}
                )
                return True
            return False
    
    async def unblock_user(self, telegram_id: int) -> bool:
        """
        –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        """
        async with self.pool.acquire() as connection:
            result = await connection.execute(
                "UPDATE bot_users SET is_blocked = false WHERE telegram_id = $1",
                str(telegram_id)
            )
            
            if result != "UPDATE 0":
                await self.log_system_event(
                    "info",
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
                )
                return True
            return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db_manager: Optional[DatabaseManager] = None


async def get_db() -> DatabaseManager:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    
    Returns:
        DatabaseManager: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ë–î
    """
    global db_manager
    if db_manager is None:
        db_manager = DatabaseManager()
        await db_manager.initialize()
    return db_manager
