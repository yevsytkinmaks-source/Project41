# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä –∏ –∫–Ω–æ–ø–æ–∫ Telegram –±–æ—Ç–∞
–°–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ inline –∏ reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä

–ê–≤—Ç–æ—Ä: –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã RU–£—á–µ–±–Ω–∏–∫
–í–µ—Ä—Å–∏—è: 1.0.0
"""

from typing import List, Dict, Any, Optional
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton

from config import KEYBOARD_TEXTS


def get_main_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞
    
    Returns:
        InlineKeyboardMarkup: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞
    """
    keyboard = [
        [
            InlineKeyboardButton(
                text=KEYBOARD_TEXTS['search_textbooks'],
                callback_data='inline_search'
            )
        ],
        [
            InlineKeyboardButton(
                text=KEYBOARD_TEXTS['help'],
                callback_data='inline_help'
            ),
            InlineKeyboardButton(
                text=KEYBOARD_TEXTS['about'],
                callback_data='inline_about'
            )
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_classes_keyboard(classes: List[Dict[str, Any]]) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–æ–≤
    
    Args:
        classes: –°–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–ª–∞—Å—Å–æ–≤
    """
    keyboard = []
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –∫–ª–∞—Å—Å—ã –ø–æ —Å—Ç—Ä–æ–∫–∞–º (–ø–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ)
    row = []
    for class_data in classes:
        button = InlineKeyboardButton(
            text=class_data['name'],
            callback_data=f"class_{class_data['id']}"
        )
        row.append(button)
        
        # –ö–æ–≥–¥–∞ –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å 3 –∫–Ω–æ–ø–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
        if len(row) == 3:
            keyboard.append(row)
            row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
    if row:
        keyboard.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard.append([
        InlineKeyboardButton(
            text=KEYBOARD_TEXTS['back_to_menu'],
            callback_data='back_menu'
        )
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_subjects_keyboard(subjects: List[Dict[str, Any]], class_id: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    
    Args:
        subjects: –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        class_id: ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
        
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    """
    keyboard = []
    
    # –ö–∞–∂–¥—ã–π –ø—Ä–µ–¥–º–µ—Ç –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    for subject in subjects:
        button = InlineKeyboardButton(
            text=f"üìö {subject['name']}",
            callback_data=f"subject_{class_id}_{subject['id']}"
        )
        keyboard.append([button])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    navigation_row = [
        InlineKeyboardButton(
            text=KEYBOARD_TEXTS['back'],
            callback_data='back_classes'
        ),
        InlineKeyboardButton(
            text=KEYBOARD_TEXTS['back_to_menu'],
            callback_data='back_menu'
        )
    ]
    keyboard.append(navigation_row)
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_textbooks_keyboard(textbooks: List[Dict[str, Any]], class_id: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ —Å–ø–∏—Å–∫–æ–º —É—á–µ–±–Ω–∏–∫–æ–≤
    
    Args:
        textbooks: –°–ø–∏—Å–æ–∫ —É—á–µ–±–Ω–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        class_id: ID –∫–ª–∞—Å—Å–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —É—á–µ–±–Ω–∏–∫–∞–º–∏
    """
    keyboard = []
    
    # –ö–∞–∂–¥—ã–π —É—á–µ–±–Ω–∏–∫ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    for textbook in textbooks:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å –∞–≤—Ç–æ—Ä–æ–º
        author_name = textbook.get('author_short_name') or textbook.get('author_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä')
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏
        title = textbook['title']
        if len(title) > 40:
            title = title[:37] + "..."
        
        button_text = f"üìñ {title} - {author_name}"
        
        button = InlineKeyboardButton(
            text=button_text,
            callback_data=f"textbook_{textbook['id']}"
        )
        keyboard.append([button])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    navigation_row = [
        InlineKeyboardButton(
            text=KEYBOARD_TEXTS['back'],
            callback_data=f'back_subjects_{class_id}'
        ),
        InlineKeyboardButton(
            text=KEYBOARD_TEXTS['back_to_menu'],
            callback_data='back_menu'
        )
    ]
    keyboard.append(navigation_row)
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_textbook_details_keyboard(textbook_id: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –¥–µ—Ç–∞–ª—è–º–∏ —É—á–µ–±–Ω–∏–∫–∞
    
    Args:
        textbook_id: ID —É—á–µ–±–Ω–∏–∫–∞
        
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    """
    keyboard = [
        [
            InlineKeyboardButton(
                text=KEYBOARD_TEXTS['download'],
                callback_data=f"download_{textbook_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text=KEYBOARD_TEXTS['back'],
                callback_data='back_textbooks'
            ),
            InlineKeyboardButton(
                text=KEYBOARD_TEXTS['back_to_menu'],
                callback_data='back_menu'
            )
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_back_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞
    """
    keyboard = [
        [
            InlineKeyboardButton(
                text=KEYBOARD_TEXTS['back_to_menu'],
                callback_data='back_menu'
            )
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_admin_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    
    Returns:
        InlineKeyboardMarkup: –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    keyboard = [
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
            InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")
        ],
        [
            InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),
            InlineKeyboardButton(text="üîß –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ", callback_data="admin_maintenance")
        ],
        [
            InlineKeyboardButton(text="üìù –õ–æ–≥–∏", callback_data="admin_logs"),
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_pagination_keyboard(current_page: int, total_pages: int, 
                           callback_prefix: str, additional_data: str = "") -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    
    Args:
        current_page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1)
        total_pages: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        callback_prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback_data
        additional_data: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è callback
        
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    """
    keyboard = []
    
    if total_pages > 1:
        pagination_row = []
        
        # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
        if current_page > 1:
            pagination_row.append(
                InlineKeyboardButton(
                    text="‚óÄÔ∏è –ü—Ä–µ–¥",
                    callback_data=f"{callback_prefix}_page_{current_page - 1}_{additional_data}"
                )
            )
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        pagination_row.append(
            InlineKeyboardButton(
                text=f"{current_page}/{total_pages}",
                callback_data="pagination_info"  # –ó–∞–≥–ª—É—à–∫–∞
            )
        )
        
        # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
        if current_page < total_pages:
            pagination_row.append(
                InlineKeyboardButton(
                    text="–°–ª–µ–¥ ‚ñ∂Ô∏è",
                    callback_data=f"{callback_prefix}_page_{current_page + 1}_{additional_data}"
                )
            )
        
        keyboard.append(pagination_row)
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_search_filters_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    """
    keyboard = [
        [
            InlineKeyboardButton(text="üéì –ü–æ –∫–ª–∞—Å—Å—É", callback_data="filter_class"),
            InlineKeyboardButton(text="üìö –ü–æ –ø—Ä–µ–¥–º–µ—Ç—É", callback_data="filter_subject")
        ],
        [
            InlineKeyboardButton(text="üë§ –ü–æ –∞–≤—Ç–æ—Ä—É", callback_data="filter_author"),
            InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é", callback_data="filter_title")
        ],
        [
            InlineKeyboardButton(text="‚≠ê –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ", callback_data="filter_popular"),
            InlineKeyboardButton(text="üÜï –ù–æ–≤—ã–µ", callback_data="filter_recent")
        ],
        [
            InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_menu")
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_confirmation_keyboard(confirm_callback: str, cancel_callback: str = "cancel") -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
    
    Args:
        confirm_callback: Callback –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        cancel_callback: Callback –¥–ª—è –æ—Ç–º–µ–Ω—ã
        
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    """
    keyboard = [
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=confirm_callback),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=cancel_callback)
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


# =============================================================================
# REPLY –ö–õ–ê–í–ò–ê–¢–£–†–´ (–¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤)
# =============================================================================

def get_contact_keyboard() -> ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    
    Returns:
        ReplyKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
    """
    keyboard = [
        [KeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]
    ]
    
    return ReplyKeyboardMarkup(
        keyboard=keyboard, 
        resize_keyboard=True, 
        one_time_keyboard=True
    )


def get_location_keyboard() -> ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    
    Returns:
        ReplyKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º
    """
    keyboard = [
        [KeyboardButton(text="üìç –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º", request_location=True)]
    ]
    
    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        one_time_keyboard=True
    )


def remove_keyboard() -> dict:
    """
    –£–±–∏—Ä–∞–µ—Ç Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    
    Returns:
        dict: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    return {"reply_markup": {"remove_keyboard": True}}
