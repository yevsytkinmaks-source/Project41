# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram –±–æ—Ç–∞ RU–£—á–µ–±–Ω–∏–∫
–°–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π

–ê–≤—Ç–æ—Ä: –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã RU–£—á–µ–±–Ω–∏–∫  
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import logging
import os
from typing import Dict, Any, Optional
from datetime import datetime

from aiogram import Dispatcher, F
from aiogram.types import Message, CallbackQuery, FSInputFile, BufferedInputFile
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from config import MESSAGES, KEYBOARD_TEXTS, CLASSES, SUBJECTS, CALLBACK_PATTERNS, FILE_CONFIG
from keyboards import (
    get_main_keyboard, get_classes_keyboard, get_subjects_keyboard, 
    get_textbooks_keyboard, get_textbook_details_keyboard, get_back_keyboard
)
from utils import format_file_size, is_rate_limited, log_user_action
from database import DatabaseManager


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM (Finite State Machine)
class BotStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    main_menu = State()          # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    selecting_class = State()    # –í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞  
    selecting_subject = State()  # –í—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞
    viewing_textbooks = State()  # –ü—Ä–æ—Å–º–æ—Ç—Ä —É—á–µ–±–Ω–∏–∫–æ–≤
    viewing_textbook = State()   # –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—á–µ–±–Ω–∏–∫–∞


logger = logging.getLogger(__name__)


# =============================================================================
# –ë–ê–ó–û–í–´–ï –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê
# =============================================================================

async def cmd_start(message: Message, state: FSMContext, db: DatabaseManager):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î
    """
    user = message.from_user
    if not user:
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if await db.is_user_blocked(user.id):
            await message.answer(
                "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=None
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        user_data = await db.get_or_create_user(
            telegram_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        await log_user_action(db, str(user.id), "start_command", {
            "username": user.username,
            "first_name": user.first_name
        })
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            MESSAGES['welcome'],
            reply_markup=get_main_keyboard(),
            parse_mode='HTML'
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        await state.set_state(BotStates.main_menu)
        
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} (@{user.username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
        await message.answer(MESSAGES['error_general'])


async def cmd_help(message: Message, db: DatabaseManager):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞
    """
    user = message.from_user
    if not user:
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        if await db.is_user_blocked(user.id):
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.update_user_activity(user.id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–∫—É
        await message.answer(
            MESSAGES['help'],
            parse_mode='HTML',
            reply_markup=get_back_keyboard()
        )
        
        logger.info(f"‚ùì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /help –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
        await message.answer(MESSAGES['error_general'])


async def cmd_about(message: Message, db: DatabaseManager):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /about  
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    """
    user = message.from_user
    if not user:
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        if await db.is_user_blocked(user.id):
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await db.get_bot_statistics()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–µ–∫—Ç–µ
        about_text = MESSAGES['about'].format(
            total_users=stats.get('total_users', 0),
            total_textbooks=stats.get('total_textbooks', 0),
            total_downloads=stats.get('total_downloads', 0)
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        await db.update_user_activity(user.id)
        
        await message.answer(
            about_text,
            parse_mode='HTML',
            reply_markup=get_back_keyboard()
        )
        
        logger.info(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /about –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
        await message.answer(MESSAGES['error_general'])


async def cmd_search(message: Message, state: FSMContext, db: DatabaseManager):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ —É—á–µ–±–Ω–∏–∫–æ–≤
    """
    user = message.from_user
    if not user:
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∏ –ª–∏–º–∏—Ç—ã
        if await db.is_user_blocked(user.id):
            return
        
        if await is_rate_limited(user.id):
            await message.answer(MESSAGES['error_rate_limit'])
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–æ–≤
        classes = await db.get_classes()
        
        if not classes:
            await message.answer(MESSAGES['error_no_textbooks'])
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–ª–∞—Å—Å–∞–º–∏
        await message.answer(
            MESSAGES['search_select_class'],
            reply_markup=get_classes_keyboard(classes)
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞
        await state.set_state(BotStates.selecting_class)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        await db.update_user_activity(user.id)
        
        logger.info(f"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–∞—á–∞–ª –ø–æ–∏—Å–∫ —É—á–µ–±–Ω–∏–∫–æ–≤")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /search –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
        await message.answer(MESSAGES['error_general'])


# =============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK –ó–ê–ü–†–û–°–û–í  
# =============================================================================

async def process_class_selection(callback: CallbackQuery, state: FSMContext, db: DatabaseManager):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    """
    user = callback.from_user
    if not user:
        return
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–ª–∞—Å—Å–∞ –∏–∑ callback_data
        class_id = callback.data.replace('class_', '')
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
        subjects = await db.get_subjects_by_class(class_id)
        
        if not subjects:
            await callback.message.edit_text(
                MESSAGES['error_no_textbooks'],
                reply_markup=get_back_keyboard()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞—Å—Å–µ
        classes = await db.get_classes()
        class_name = next((c['name'] for c in classes if c['id'] == class_id), f"–ö–ª–∞—Å—Å {class_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
        await callback.message.edit_text(
            MESSAGES['search_select_subject'].format(class_name=class_name),
            reply_markup=get_subjects_keyboard(subjects, class_id)
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(selected_class_id=class_id, selected_class_name=class_name)
        await state.set_state(BotStates.selecting_subject)
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        await callback.answer()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        await db.update_user_activity(user.id)
        
        logger.info(f"üéì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –≤—ã–±—Ä–∞–ª –∫–ª–∞—Å—Å: {class_name}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–ª–∞—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id}: {e}")
        await callback.answer(MESSAGES['error_general'], show_alert=True)


async def process_subject_selection(callback: CallbackQuery, state: FSMContext, db: DatabaseManager):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    """
    user = callback.from_user
    if not user:
        return
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data: subject_class_id_subject_id
        parts = callback.data.replace('subject_', '').split('_', 1)
        class_id = parts[0]
        subject_id = parts[1]
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        class_name = state_data.get('selected_class_name', f'–ö–ª–∞—Å—Å {class_id}')
        
        # –ü–æ–ª—É—á–∞–µ–º —É—á–µ–±–Ω–∏–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ –∏ –ø—Ä–µ–¥–º–µ—Ç–∞
        textbooks = await db.get_textbooks(class_id, subject_id)
        
        if not textbooks:
            await callback.message.edit_text(
                MESSAGES['error_no_textbooks'],
                reply_markup=get_back_keyboard()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
        subject_name = textbooks[0]['subject_name'] if textbooks else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç'
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–µ–±–Ω–∏–∫–æ–≤
        await callback.message.edit_text(
            MESSAGES['search_select_textbook'].format(
                subject_name=subject_name,
                class_name=class_name
            ),
            reply_markup=get_textbooks_keyboard(textbooks, class_id),
            parse_mode='HTML'
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            selected_subject_id=subject_id, 
            selected_subject_name=subject_name,
            textbooks=textbooks
        )
        await state.set_state(BotStates.viewing_textbooks)
        
        await callback.answer()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        await db.update_user_activity(user.id)
        
        logger.info(f"üìö –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –≤—ã–±—Ä–∞–ª –ø—Ä–µ–¥–º–µ—Ç: {subject_name} –¥–ª—è {class_name}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id}: {e}")
        await callback.answer(MESSAGES['error_general'], show_alert=True)


async def process_textbook_selection(callback: CallbackQuery, state: FSMContext, db: DatabaseManager):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—á–µ–±–Ω–∏–∫–∞
    """
    user = callback.from_user  
    if not user:
        return
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —É—á–µ–±–Ω–∏–∫–∞
        textbook_id = callback.data.replace('textbook_', '')
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–µ–±–Ω–∏–∫–µ
        textbook = await db.get_textbook(textbook_id)
        
        if not textbook:
            await callback.answer(MESSAGES['error_file_not_found'], show_alert=True)
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size_str = format_file_size(textbook.get('file_size', 0))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        info_text = MESSAGES['search_textbook_info'].format(
            title=textbook['title'],
            author=textbook.get('author_short_name') or textbook.get('author_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä'),
            class_name=textbook.get('class_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∞—Å—Å'),
            subject_name=textbook.get('subject_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç'),
            file_size=file_size_str,
            downloads=textbook.get('download_count', 0)
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –∫–Ω–æ–ø–∫–æ–π —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        await callback.message.edit_text(
            info_text,
            reply_markup=get_textbook_details_keyboard(textbook_id),
            parse_mode='HTML'
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —É—á–µ–±–Ω–∏–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(selected_textbook=textbook)
        await state.set_state(BotStates.viewing_textbook)
        
        await callback.answer()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        await db.update_user_activity(user.id)
        
        logger.info(f"üìñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —É—á–µ–±–Ω–∏–∫: {textbook['title']}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —É—á–µ–±–Ω–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id}: {e}")
        await callback.answer(MESSAGES['error_general'], show_alert=True)


async def process_textbook_download(callback: CallbackQuery, state: FSMContext, db: DatabaseManager):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —É—á–µ–±–Ω–∏–∫–∞
    """
    user = callback.from_user
    if not user:
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        if await is_rate_limited(user.id):
            await callback.answer(MESSAGES['error_rate_limit'], show_alert=True)
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —É—á–µ–±–Ω–∏–∫–∞
        textbook_id = callback.data.replace('download_', '')
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–µ–±–Ω–∏–∫–µ
        textbook = await db.get_textbook(textbook_id)
        
        if not textbook or not os.path.exists(textbook['file_path']):
            await callback.answer(MESSAGES['error_file_not_found'], show_alert=True)
            return
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        await callback.answer(MESSAGES['success_download_started'])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ø–µ—á–∞—Ç–∞—é—â–∏–π" —Å—Ç–∞—Ç—É—Å
        await callback.message.answer_chat_action('upload_document')
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            file_to_send = FSInputFile(textbook['file_path'])
            
            await callback.message.answer_document(
                document=file_to_send,
                caption=f"üìñ <b>{textbook['title']}</b>\n"
                       f"üë§ <b>–ê–≤—Ç–æ—Ä:</b> {textbook.get('author_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä')}\n"
                       f"üéì <b>–ö–ª–∞—Å—Å:</b> {textbook.get('class_name', '')}\n"
                       f"üìö <b>–ü—Ä–µ–¥–º–µ—Ç:</b> {textbook.get('subject_name', '')}",
                parse_mode='HTML'
            )
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            await db.increment_textbook_downloads(textbook_id)
            await db.increment_user_downloads(user.id)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
            user_data = await db.get_or_create_user(user.id)
            await db.log_download(user_data['id'], textbook_id)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            await log_user_action(db, str(user.id), "textbook_downloaded", {
                "textbook_id": textbook_id,
                "textbook_title": textbook['title'],
                "author": textbook.get('author_name'),
                "class": textbook.get('class_name'),
                "subject": textbook.get('subject_name')
            })
            
            logger.info(f"üì• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —Å–∫–∞—á–∞–ª —É—á–µ–±–Ω–∏–∫: {textbook['title']}")
            
        except Exception as file_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {file_error}")
            await callback.message.answer(MESSAGES['error_download_failed'])
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —É—á–µ–±–Ω–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id}: {e}")
        await callback.answer(MESSAGES['error_general'], show_alert=True)


# =============================================================================
# –ù–ê–í–ò–ì–ê–¶–ò–û–ù–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
# =============================================================================

async def process_back_to_classes(callback: CallbackQuery, state: FSMContext, db: DatabaseManager):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∫–ª–∞—Å—Å–æ–≤"""
    try:
        classes = await db.get_classes()
        
        await callback.message.edit_text(
            MESSAGES['search_select_class'],
            reply_markup=get_classes_keyboard(classes)
        )
        
        await state.set_state(BotStates.selecting_class)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –∫–ª–∞—Å—Å–∞–º: {e}")
        await callback.answer(MESSAGES['error_general'], show_alert=True)


async def process_back_to_subjects(callback: CallbackQuery, state: FSMContext, db: DatabaseManager):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        class_id = state_data.get('selected_class_id')
        class_name = state_data.get('selected_class_name')
        
        if not class_id:
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–ª–∞—Å—Å–∞–º
            await process_back_to_classes(callback, state, db)
            return
        
        subjects = await db.get_subjects_by_class(class_id)
        
        await callback.message.edit_text(
            MESSAGES['search_select_subject'].format(class_name=class_name),
            reply_markup=get_subjects_keyboard(subjects, class_id)
        )
        
        await state.set_state(BotStates.selecting_subject)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º: {e}")
        await callback.answer(MESSAGES['error_general'], show_alert=True)


async def process_back_to_menu(callback: CallbackQuery, state: FSMContext, db: DatabaseManager):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        await callback.message.edit_text(
            MESSAGES['welcome'],
            reply_markup=get_main_keyboard(),
            parse_mode='HTML'
        )
        
        await state.set_state(BotStates.main_menu)
        await state.clear()  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await callback.answer()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é: {e}")
        await callback.answer(MESSAGES['error_general'], show_alert=True)


# =============================================================================
# –û–ë–†–ê–ë–û–¢–ö–ê –ò–ù–õ–ê–ô–ù –ö–ù–û–ü–û–ö –ò–ó –û–°–ù–û–í–ù–û–ì–û –ú–ï–ù–Æ
# =============================================================================

async def process_inline_search(callback: CallbackQuery, state: FSMContext, db: DatabaseManager):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü–æ–∏—Å–∫ —É—á–µ–±–Ω–∏–∫–æ–≤' –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã search
    message_obj = callback.message
    message_obj.from_user = callback.from_user  # –ü–æ–¥–º–µ–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await cmd_search(message_obj, state, db)
    await callback.answer()


async def process_inline_help(callback: CallbackQuery, db: DatabaseManager):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–æ—â—å' –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    message_obj = callback.message
    message_obj.from_user = callback.from_user
    await cmd_help(message_obj, db)
    await callback.answer()


async def process_inline_about(callback: CallbackQuery, db: DatabaseManager):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–û –ø—Ä–æ–µ–∫—Ç–µ' –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""  
    message_obj = callback.message
    message_obj.from_user = callback.from_user
    await cmd_about(message_obj, db)
    await callback.answer()


# =============================================================================
# –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –í–°–ï–• –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í
# =============================================================================

def register_all_handlers(dp: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ callback'–æ–≤
    
    Args:
        dp: –≠–∫–∑–µ–º–ø–ª—è—Ä Dispatcher –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    """
    
    # –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    dp.message.register(cmd_start, Command(commands=['start']))
    dp.message.register(cmd_help, Command(commands=['help']))
    dp.message.register(cmd_about, Command(commands=['about']))
    dp.message.register(cmd_search, Command(commands=['search']))
    
    # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–æ–≤, –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ —É—á–µ–±–Ω–∏–∫–æ–≤
    dp.callback_query.register(process_class_selection, F.data.startswith('class_'))
    dp.callback_query.register(process_subject_selection, F.data.startswith('subject_'))
    dp.callback_query.register(process_textbook_selection, F.data.startswith('textbook_'))
    dp.callback_query.register(process_textbook_download, F.data.startswith('download_'))
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ callback'—ã
    dp.callback_query.register(process_back_to_classes, F.data == 'back_classes')
    dp.callback_query.register(process_back_to_subjects, F.data.startswith('back_subjects_'))
    dp.callback_query.register(process_back_to_menu, F.data == 'back_menu')
    
    # –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    dp.callback_query.register(process_inline_search, F.data == 'inline_search')
    dp.callback_query.register(process_inline_help, F.data == 'inline_help')
    dp.callback_query.register(process_inline_about, F.data == 'inline_about')
    
    logger.info("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ callback'–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
