#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π Telegram –±–æ—Ç RU–£—á–µ–±–Ω–∏–∫ —Å –ø–æ—Ç–æ–∫–æ–º —Å–æ–≥–ª–∞—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
–í–∫–ª—é—á–∞–µ—Ç –º–µ–Ω—é –†–µ—à–∞—Ç–æ—Ä/–£—á–µ–±–Ω–∏–∫–∏, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
"""

import asyncio
import logging
import os
import sys
import json
from pathlib import Path
from datetime import datetime

from aiogram import Bot, Dispatcher, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from config import BOT_CONFIG, MESSAGES
from simple_database import DatabaseManager
from simple_utils import setup_logging


class BotStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞"""
    waiting_for_rules_agreement = State()
    main_menu = State()
    solver_menu = State()
    textbooks_menu = State()
    selecting_class = State()
    selecting_subject = State()
    viewing_textbooks = State()
    help_mode = State()


class EnhancedRUUchebnikBot:
    def __init__(self):
        self.db_manager = None
        self.bot = None
        self.dp = None
        self.images_dir = "images"
        self.ensure_images_directory()
        
    def ensure_images_directory(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
        if not os.path.exists(self.images_dir):
            os.makedirs(self.images_dir)
        
        for subdir in ["rules", "solver", "textbooks", "help"]:
            path = os.path.join(self.images_dir, subdir)
            if not os.path.exists(path):
                os.makedirs(path)
    
    def get_image_path(self, image_type: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
        image_dir = os.path.join(self.images_dir, image_type)
        if os.path.exists(image_dir):
            for file in os.listdir(image_dir):
                if file.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.bmp')):
                    return os.path.join(image_dir, file)
        return None
    
    def get_main_menu_keyboard(self) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏"""
        keyboard = [
            [
                InlineKeyboardButton(text="üßÆ –†–µ—à–∞—Ç–æ—Ä", callback_data="menu_solver"),
                InlineKeyboardButton(text="üìö –£—á–µ–±–Ω–∏–∫–∏", callback_data="menu_textbooks")
            ],
            [
                InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="menu_help"),
                InlineKeyboardButton(text="‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ", callback_data="menu_about")
            ]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    def get_rules_keyboard(self) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∞–≤–∏–ª"""
        keyboard = [
            [InlineKeyboardButton(text="‚úÖ –î–∞, —è —Å–æ–≥–ª–∞—Å–µ–Ω —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏", callback_data="agree_rules")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    def get_classes_keyboard(self) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞"""
        keyboard = []
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–ª–∞—Å—Å–æ–≤ –ø–æ 3 –≤ —Ä—è–¥—É
        row = []
        for i in range(1, 12):
            row.append(InlineKeyboardButton(text=f"{i} –∫–ª–∞—Å—Å", callback_data=f"class_{i}"))
            if len(row) == 3:
                keyboard.append(row)
                row = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–ª–∞—Å—Å—ã
        if row:
            keyboard.append(row)
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")])
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    def get_subjects_keyboard(self, class_num: str) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞"""
        subjects = [
            ("üìê –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "math"),
            ("üìù –†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "russian"),
            ("üìñ –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "literature"),
            ("‚öóÔ∏è –§–∏–∑–∏–∫–∞", "physics"),
            ("üß™ –•–∏–º–∏—è", "chemistry"),
            ("üå± –ë–∏–æ–ª–æ–≥–∏—è", "biology"),
            ("üåç –ì–µ–æ–≥—Ä–∞—Ñ–∏—è", "geography"),
            ("üèõÔ∏è –ò—Å—Ç–æ—Ä–∏—è", "history"),
            ("üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π", "english")
        ]
        
        keyboard = []
        for name, code in subjects:
            keyboard.append([InlineKeyboardButton(text=name, callback_data=f"subject_{class_num}_{code}")])
        
        keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–ª–∞—Å—Å–∞–º", callback_data="back_classes")])
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    def get_author_help_keyboard(self) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–º–æ—â–∏ –ø–æ –≤—ã–±–æ—Ä—É –∞–≤—Ç–æ—Ä–∞"""
        keyboard = [
            [InlineKeyboardButton(text="‚ùì –ì–¥–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–≤—Ç–æ—Ä–∞?", callback_data="help_author")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_textbooks")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    async def start_command(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = message.from_user
        if not user:
            return
        
        logger = logging.getLogger(__name__)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if await self.db_manager.is_user_blocked(user.id):
                await message.answer("‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = await self.db_manager.get_or_create_user(
                telegram_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞
            if user_data.get('is_new', False):
                await self.show_rules(message, state)
            else:
                await self.show_main_menu(message, state)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def show_rules(self, message: Message, state: FSMContext):
        """–ü–æ–∫–∞–∑ –ø—Ä–∞–≤–∏–ª —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
        rules_text = """
üîí <b>–ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è RU–£—á–µ–±–Ω–∏–∫</b>

1. üìö –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π
2. üö´ –ó–∞–ø—Ä–µ—â–µ–Ω–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –±–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–æ–≤
3. üë• –ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
4. üìù –°–æ–±–ª—é–¥–∞–π—Ç–µ –∞–≤—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞
5. üîê –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º

<i>–ü—Ä–æ–¥–æ–ª–∂–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏.</i>
        """
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª
        rules_image_path = self.get_image_path("rules")
        
        if rules_image_path:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
            photo = FSInputFile(rules_image_path)
            await message.answer_photo(
                photo=photo,
                caption=rules_text,
                parse_mode=ParseMode.HTML,
                reply_markup=self.get_rules_keyboard()
            )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            await message.answer(
                rules_text,
                parse_mode=ParseMode.HTML,
                reply_markup=self.get_rules_keyboard()
            )
        
        await state.set_state(BotStates.waiting_for_rules_agreement)
    
    async def handle_rules_agreement(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏"""
        if callback.data == "agree_rules":
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
            await callback.message.delete()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await self.show_main_menu_from_callback(callback, state)
            await callback.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RU–£—á–µ–±–Ω–∏–∫! üéì")
    
    async def show_main_menu(self, message: Message, state: FSMContext):
        """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        menu_text = """
üéì <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é RU–£—á–µ–±–Ω–∏–∫</b>

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:

üßÆ <b>–†–µ—à–∞—Ç–æ—Ä</b> - –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏ –ø—Ä–∏–º–µ—Ä–æ–≤
üìö <b>–£—á–µ–±–Ω–∏–∫–∏</b> - –ü–æ–∏—Å–∫ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —É—á–µ–±–Ω–∏–∫–æ–≤
‚ùì <b>–ü–æ–º–æ—â—å</b> - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
‚ÑπÔ∏è <b>–û –ø—Ä–æ–µ–∫—Ç–µ</b> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ RU–£—á–µ–±–Ω–∏–∫
        """
        
        await message.answer(
            menu_text,
            parse_mode=ParseMode.HTML,
            reply_markup=self.get_main_menu_keyboard()
        )
        
        await state.set_state(BotStates.main_menu)
    
    async def show_main_menu_from_callback(self, callback: CallbackQuery, state: FSMContext):
        """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏–∑ callback"""
        menu_text = """
üéì <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é RU–£—á–µ–±–Ω–∏–∫</b>

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:

üßÆ <b>–†–µ—à–∞—Ç–æ—Ä</b> - –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏ –ø—Ä–∏–º–µ—Ä–æ–≤
üìö <b>–£—á–µ–±–Ω–∏–∫–∏</b> - –ü–æ–∏—Å–∫ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —É—á–µ–±–Ω–∏–∫–æ–≤
‚ùì <b>–ü–æ–º–æ—â—å</b> - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
‚ÑπÔ∏è <b>–û –ø—Ä–æ–µ–∫—Ç–µ</b> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ RU–£—á–µ–±–Ω–∏–∫
        """
        
        await callback.message.edit_text(
            menu_text,
            parse_mode=ParseMode.HTML,
            reply_markup=self.get_main_menu_keyboard()
        )
        
        await state.set_state(BotStates.main_menu)
    
    async def handle_solver_menu(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é —Ä–µ—à–∞—Ç–æ—Ä–∞"""
        solver_image_path = self.get_image_path("solver")
        
        solver_text = """
üßÆ <b>–†–µ—à–∞—Ç–æ—Ä –∑–∞–¥–∞—á</b>

<i>Soon...</i>

–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.
–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –º–æ—â–Ω—ã–π —Ä–µ—à–∞—Ç–æ—Ä –¥–ª—è:

‚Ä¢ üìê –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
‚Ä¢ ‚öóÔ∏è –§–∏–∑–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á  
‚Ä¢ üß™ –•–∏–º–∏—á–µ—Å–∫–∏—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π
‚Ä¢ üìä –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤

–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏! üöÄ
        """
        
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
        ])
        
        if solver_image_path:
            photo = FSInputFile(solver_image_path)
            await callback.message.delete()
            await callback.message.answer_photo(
                photo=photo,
                caption=solver_text,
                parse_mode=ParseMode.HTML,
                reply_markup=back_keyboard
            )
        else:
            await callback.message.edit_text(
                solver_text,
                parse_mode=ParseMode.HTML,
                reply_markup=back_keyboard
            )
        
        await state.set_state(BotStates.solver_menu)
        await callback.answer()
    
    async def handle_textbooks_menu(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é —É—á–µ–±–Ω–∏–∫–æ–≤"""
        textbooks_image_path = self.get_image_path("textbooks")
        
        textbooks_text = """
üìö <b>–£—á–µ–±–Ω–∏–∫–∏</b>

–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —É—á–µ–±–Ω–∏–∫–æ–≤:

üéì –î–æ—Å—Ç—É–ø–Ω—ã —É—á–µ–±–Ω–∏–∫–∏ –¥–ª—è 1-11 –∫–ª–∞—Å—Å–æ–≤
üìñ –†–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
üìÑ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ PDF
‚¨áÔ∏è –ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–ª–∞—Å—Å –Ω–∏–∂–µ:
        """
        
        if textbooks_image_path:
            photo = FSInputFile(textbooks_image_path)
            await callback.message.delete()
            await callback.message.answer_photo(
                photo=photo,
                caption=textbooks_text,
                parse_mode=ParseMode.HTML,
                reply_markup=self.get_classes_keyboard()
            )
        else:
            await callback.message.edit_text(
                textbooks_text,
                parse_mode=ParseMode.HTML,
                reply_markup=self.get_classes_keyboard()
            )
        
        await state.set_state(BotStates.selecting_class)
        await callback.answer()
    
    async def handle_class_selection(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞"""
        class_num = callback.data.split("_")[1]
        
        subjects_text = f"""
üìö <b>–í—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è {class_num} –∫–ª–∞—Å—Å–∞</b>

–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —É—á–µ–±–Ω–∏–∫–æ–≤:
        """
        
        await callback.message.edit_text(
            subjects_text,
            parse_mode=ParseMode.HTML,
            reply_markup=self.get_subjects_keyboard(class_num)
        )
        
        await state.update_data(selected_class=class_num)
        await state.set_state(BotStates.selecting_subject)
        await callback.answer()
    
    async def handle_subject_selection(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞"""
        _, class_num, subject = callback.data.split("_", 2)
        
        # –ü–æ–ª—É—á–∞–µ–º —É—á–µ–±–Ω–∏–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        textbooks = await self.db_manager.get_textbooks_by_class_and_subject(
            class_name=f"{class_num} –∫–ª–∞—Å—Å",
            subject=subject
        )
        
        if textbooks:
            textbooks_text = f"""
üìñ <b>–£—á–µ–±–Ω–∏–∫–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É –¥–ª—è {class_num} –∫–ª–∞—Å—Å–∞</b>

–ù–∞–π–¥–µ–Ω–æ —É—á–µ–±–Ω–∏–∫–æ–≤: {len(textbooks)}

–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–º–æ—â—å—é:
            """
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—á–µ–±–Ω–∏–∫–∞–º–∏
            keyboard = []
            for book in textbooks[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                keyboard.append([InlineKeyboardButton(
                    text=f"üìñ {book['author']} - {book['title'][:30]}...",
                    callback_data=f"book_{book['id']}"
                )])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–º–æ—â–∏
            keyboard.append([InlineKeyboardButton(text="‚ùì –ì–¥–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–≤—Ç–æ—Ä–∞?", callback_data="help_author")])
            keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º", callback_data=f"back_subjects_{class_num}")])
            
            reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        else:
            textbooks_text = f"""
üìñ <b>–£—á–µ–±–Ω–∏–∫–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É –¥–ª—è {class_num} –∫–ª–∞—Å—Å–∞</b>

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É—á–µ–±–Ω–∏–∫–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—Ä–µ–¥–º–µ—Ç –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
            """
            
            reply_markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º", callback_data=f"back_subjects_{class_num}")]
            ])
        
        await callback.message.edit_text(
            textbooks_text,
            parse_mode=ParseMode.HTML,
            reply_markup=reply_markup
        )
        
        await state.update_data(selected_subject=subject)
        await state.set_state(BotStates.viewing_textbooks)
        await callback.answer()
    
    async def handle_author_help(self, callback: CallbackQuery, state: FSMContext):
        """–ü–æ–∫–∞–∑ –ø–æ–º–æ—â–∏ –ø–æ –≤—ã–±–æ—Ä—É –∞–≤—Ç–æ—Ä–∞"""
        help_image_path = self.get_image_path("help")
        
        help_text = """
‚ùì <b>–ö–∞–∫ –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ—Ä–∞ —É—á–µ–±–Ω–∏–∫–∞</b>

–ê–≤—Ç–æ—Ä —É—á–µ–±–Ω–∏–∫–∞ –æ–±—ã—á–Ω–æ —É–∫–∞–∑–∞–Ω:

1. üìñ –ù–∞ –æ–±–ª–æ–∂–∫–µ —É—á–µ–±–Ω–∏–∫–∞ (–∫—Ä—É–ø–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏)
2. üìÑ –ù–∞ —Ç–∏—Ç—É–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ 
3. üîç –í –∫–∞—Ç–∞–ª–æ–≥–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
4. üíª –ù–∞ —Å–∞–π—Ç–µ –∏–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞

<i>–û–±—ã—á–Ω–æ –∞–≤—Ç–æ—Ä —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –§–∞–º–∏–ª–∏—è –ò.–û.</i>

–ü—Ä–∏–º–µ—Ä: –ú–µ—Ä–∑–ª—è–∫ –ê.–ì., –ü–æ–ª–æ–Ω—Å–∫–∏–π –í.–ë.
        """
        
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É—á–µ–±–Ω–∏–∫–∞–º", callback_data="back_textbooks_help")]
        ])
        
        if help_image_path:
            photo = FSInputFile(help_image_path)
            await callback.message.delete()
            await callback.message.answer_photo(
                photo=photo,
                caption=help_text,
                parse_mode=ParseMode.HTML,
                reply_markup=back_keyboard
            )
        else:
            await callback.message.edit_text(
                help_text,
                parse_mode=ParseMode.HTML,
                reply_markup=back_keyboard
            )
        
        await state.set_state(BotStates.help_mode)
        await callback.answer()
    
    async def handle_navigation(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        if callback.data == "back_main":
            await self.show_main_menu_from_callback(callback, state)
        elif callback.data == "back_classes":
            await self.handle_textbooks_menu(callback, state)
        elif callback.data.startswith("back_subjects_"):
            class_num = callback.data.split("_")[2]
            await self.handle_class_selection(callback, state)
        elif callback.data == "back_textbooks_help":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É—á–µ–±–Ω–∏–∫–∞–º
            state_data = await state.get_data()
            class_num = state_data.get('selected_class', '1')
            subject = state_data.get('selected_subject', 'math')
            callback.data = f"subject_{class_num}_{subject}"
            await self.handle_subject_selection(callback, state)
        
        await callback.answer()
    
    async def callback_handler(self, callback: CallbackQuery, state: FSMContext):
        """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            if callback.data == "agree_rules":
                await self.handle_rules_agreement(callback, state)
            elif callback.data == "menu_solver":
                await self.handle_solver_menu(callback, state)
            elif callback.data == "menu_textbooks":
                await self.handle_textbooks_menu(callback, state)
            elif callback.data.startswith("class_"):
                await self.handle_class_selection(callback, state)
            elif callback.data.startswith("subject_"):
                await self.handle_subject_selection(callback, state)
            elif callback.data == "help_author":
                await self.handle_author_help(callback, state)
            elif callback.data.startswith("back_"):
                await self.handle_navigation(callback, state)
            elif callback.data.startswith("book_"):
                book_id = callback.data.split("_")[1]
                await self.handle_book_download(callback, book_id)
            else:
                await callback.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ callback_handler: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    async def handle_book_download(self, callback: CallbackQuery, book_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏"""
        await callback.answer("üì• –§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏
    
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.dp.message.register(self.start_command, Command("start"))
        
        # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.dp.callback_query.register(self.callback_handler)
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        setup_logging()
        logger = logging.getLogger(__name__)
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ Telegram –±–æ—Ç–∞ RU–£—á–µ–±–Ω–∏–∫...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
        bot_token = BOT_CONFIG.get('token')
        if not bot_token or bot_token == 'demo_token':
            logger.error("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞—Å—Ç–æ—è—â–∏–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
            return
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            self.db_manager = DatabaseManager()
            await self.db_manager.initialize()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
            self.bot = Bot(
                token=bot_token,
                default=DefaultBotProperties(parse_mode=ParseMode.HTML)
            )
            
            storage = MemoryStorage()
            self.dp = Dispatcher(storage=storage)
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            self.register_handlers()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            bot_info = await self.bot.get_me()
            logger.info(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.username}")
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥
            from aiogram.types import BotCommand
            await self.bot.set_my_commands([
                BotCommand(command="start", description="üè† –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
                BotCommand(command="help", description="‚ùì –ü–æ–º–æ—â—å"),
            ])
            
            # –ó–∞–ø—É—Å–∫ polling
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ polling...")
            await self.dp.start_polling(self.bot, drop_pending_updates=True)
            
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            if self.db_manager:
                await self.db_manager.close()
            if self.bot:
                await self.bot.session.close()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = EnhancedRUUchebnikBot()
    await bot.start()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        sys.exit(1)