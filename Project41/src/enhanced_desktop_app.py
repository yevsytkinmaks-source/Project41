#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ª—É—á—à–µ–Ω–Ω–æ–µ –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ RU–£—á–µ–±–Ω–∏–∫ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
–í–∫–ª—é—á–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–º–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º –∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
"""

import sys
import os
import json
import subprocess
import threading
import time
import tkinter as tk
from tkinter import ttk, messagebox, filedialog, simpledialog
from datetime import datetime
from typing import Optional, Dict, List
import requests
from PIL import Image, ImageTk
import webbrowser

class RUUchebnikDesktopApp:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("RU–£—á–µ–±–Ω–∏–∫ - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å")
        self.root.geometry("1400x900")
        self.root.configure(bg="#001F3F")
        
        # Configuration
        self.bot_process: Optional[subprocess.Popen] = None
        self.web_process: Optional[subprocess.Popen] = None
        self.is_authenticated = False
        
        # Paths for images
        self.images_dir = "images"
        self.create_images_directory()
        
        # Image management
        self.current_images = {
            "rules": None,
            "solver": None,
            "textbooks": None,
            "help_author": None
        }
        
        self.setup_styles()
        self.create_main_interface()
        self.load_existing_images()
        
    def create_images_directory(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        if not os.path.exists(self.images_dir):
            os.makedirs(self.images_dir)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        subdirs = ["rules", "solver", "textbooks", "help"]
        for subdir in subdirs:
            path = os.path.join(self.images_dir, subdir)
            if not os.path.exists(path):
                os.makedirs(path)
    
    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        style = ttk.Style()
        style.theme_use('clam')
        
        # –°—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        style.configure('Dark.TButton',
                       background='#4CAF50',
                       foreground='white',
                       borderwidth=2,
                       focuscolor='none',
                       relief='raised')
        style.map('Dark.TButton',
                 background=[('active', '#45a049')])
        
        # –°—Ç–∏–ª–∏ –¥–ª—è —Ñ—Ä–µ–π–º–æ–≤
        style.configure('Dark.TFrame',
                       background='#2C3E50',
                       relief='raised',
                       borderwidth=2)
        
        # –°—Ç–∏–ª–∏ –¥–ª—è –º–µ—Ç–æ–∫
        style.configure('Dark.TLabel',
                       background='#2C3E50',
                       foreground='white',
                       font=('Arial', 12))
        
        style.configure('Title.TLabel',
                       background='#001F3F',
                       foreground='white',
                       font=('Arial', 20, 'bold'))
    
    def create_main_interface(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = ttk.Frame(self.root, style='Dark.TFrame')
        title_frame.pack(fill='x', padx=10, pady=5)
        
        title_label = ttk.Label(title_frame, 
                               text="üéì RU–£—á–µ–±–Ω–∏–∫ - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å", 
                               style='Title.TLabel')
        title_label.pack(pady=10)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill='both', expand=True, padx=10, pady=5)
        
        # –í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
        self.create_bot_management_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        self.create_image_management_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        self.create_admin_panel_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_web_interface_tab()
    
    def create_bot_management_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º"""
        bot_frame = ttk.Frame(self.notebook, style='Dark.TFrame')
        self.notebook.add(bot_frame, text="ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º")
        
        # –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        status_frame = ttk.LabelFrame(bot_frame, text="–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞", style='Dark.TFrame')
        status_frame.pack(fill='x', padx=10, pady=5)
        
        self.bot_status_label = ttk.Label(status_frame, 
                                         text="‚ùå –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", 
                                         style='Dark.TLabel')
        self.bot_status_label.pack(pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(status_frame, style='Dark.TFrame')
        control_frame.pack(pady=10)
        
        self.start_bot_btn = ttk.Button(control_frame, 
                                       text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", 
                                       command=self.start_bot,
                                       style='Dark.TButton')
        self.start_bot_btn.pack(side='left', padx=5)
        
        self.stop_bot_btn = ttk.Button(control_frame, 
                                      text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞", 
                                      command=self.stop_bot,
                                      style='Dark.TButton')
        self.stop_bot_btn.pack(side='left', padx=5)
        
        self.restart_bot_btn = ttk.Button(control_frame, 
                                         text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", 
                                         command=self.restart_bot,
                                         style='Dark.TButton')
        self.restart_bot_btn.pack(side='left', padx=5)
        
        # –õ–æ–≥–∏ –±–æ—Ç–∞
        logs_frame = ttk.LabelFrame(bot_frame, text="–õ–æ–≥–∏ –±–æ—Ç–∞", style='Dark.TFrame')
        logs_frame.pack(fill='both', expand=True, padx=10, pady=5)
        
        self.log_text = tk.Text(logs_frame, 
                               bg='#1e1e1e', 
                               fg='white', 
                               wrap='word',
                               font=('Courier', 10))
        log_scrollbar = ttk.Scrollbar(logs_frame, orient='vertical', command=self.log_text.yview)
        self.log_text.configure(yscrollcommand=log_scrollbar.set)
        
        self.log_text.pack(side='left', fill='both', expand=True)
        log_scrollbar.pack(side='right', fill='y')
    
    def create_image_management_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏"""
        img_frame = ttk.Frame(self.notebook, style='Dark.TFrame')
        self.notebook.add(img_frame, text="üñºÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
        
        # –°–æ–∑–¥–∞–µ–º Canvas –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        canvas = tk.Canvas(img_frame, bg='#2C3E50')
        scrollbar = ttk.Scrollbar(img_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas, style='Dark.TFrame')
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        self.create_image_section(scrollable_frame, "rules", "üîí –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª")
        self.create_image_section(scrollable_frame, "solver", "üßÆ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ—à–∞—Ç–æ—Ä–∞")  
        self.create_image_section(scrollable_frame, "textbooks", "üìö –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—á–µ–±–Ω–∏–∫–æ–≤")
        self.create_image_section(scrollable_frame, "help_author", "‚ùì –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–º–æ—â–∏ (–≤—ã–±–æ—Ä –∞–≤—Ç–æ—Ä–∞)")
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
    
    def create_image_section(self, parent, image_type: str, title: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–¥–Ω–∏–º —Ç–∏–ø–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        section_frame = ttk.LabelFrame(parent, text=title, style='Dark.TFrame')
        section_frame.pack(fill='x', padx=10, pady=10)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        img_display_frame = ttk.Frame(section_frame, style='Dark.TFrame')
        img_display_frame.pack(pady=10)
        
        # –ú–µ—Ç–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        img_label = ttk.Label(img_display_frame, text="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ", style='Dark.TLabel')
        img_label.pack()
        setattr(self, f"{image_type}_img_label", img_label)
        
        # –ú–µ—Ç–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–µ
        info_label = ttk.Label(img_display_frame, text="", style='Dark.TLabel')
        info_label.pack()
        setattr(self, f"{image_type}_info_label", info_label)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_frame = ttk.Frame(section_frame, style='Dark.TFrame')
        btn_frame.pack(pady=10)
        
        add_btn = ttk.Button(btn_frame, 
                            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", 
                            command=lambda: self.add_image(image_type),
                            style='Dark.TButton')
        add_btn.pack(side='left', padx=5)
        
        change_btn = ttk.Button(btn_frame, 
                               text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", 
                               command=lambda: self.change_image(image_type),
                               style='Dark.TButton')
        change_btn.pack(side='left', padx=5)
        
        delete_btn = ttk.Button(btn_frame, 
                               text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", 
                               command=lambda: self.delete_image(image_type),
                               style='Dark.TButton')
        delete_btn.pack(side='left', padx=5)
    
    def create_admin_panel_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        admin_frame = ttk.Frame(self.notebook, style='Dark.TFrame')
        self.notebook.add(admin_frame, text="üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
        admin_mgmt_frame = ttk.LabelFrame(admin_frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏", style='Dark.TFrame')
        admin_mgmt_frame.pack(fill='x', padx=10, pady=5)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        add_admin_frame = ttk.Frame(admin_mgmt_frame, style='Dark.TFrame')
        add_admin_frame.pack(pady=10)
        
        ttk.Label(add_admin_frame, text="ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞:", style='Dark.TLabel').pack(side='left')
        self.admin_id_entry = ttk.Entry(add_admin_frame)
        self.admin_id_entry.pack(side='left', padx=5)
        
        ttk.Button(add_admin_frame, 
                  text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", 
                  command=self.add_admin,
                  style='Dark.TButton').pack(side='left', padx=5)
        
        # –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
        admins_list_frame = ttk.LabelFrame(admin_frame, text="–¢–µ–∫—É—â–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã", style='Dark.TFrame')
        admins_list_frame.pack(fill='both', expand=True, padx=10, pady=5)
        
        self.admins_listbox = tk.Listbox(admins_list_frame, bg='#1e1e1e', fg='white')
        admins_scrollbar = ttk.Scrollbar(admins_list_frame, orient='vertical', command=self.admins_listbox.yview)
        self.admins_listbox.configure(yscrollcommand=admins_scrollbar.set)
        
        self.admins_listbox.pack(side='left', fill='both', expand=True)
        admins_scrollbar.pack(side='right', fill='y')
        
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
        ttk.Button(admins_list_frame, 
                  text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞", 
                  command=self.remove_admin,
                  style='Dark.TButton').pack(pady=5)
    
    def create_web_interface_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        web_frame = ttk.Frame(self.notebook, style='Dark.TFrame')
        self.notebook.add(web_frame, text="üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        
        # –°—Ç–∞—Ç—É—Å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
        web_status_frame = ttk.LabelFrame(web_frame, text="–°—Ç–∞—Ç—É—Å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞", style='Dark.TFrame')
        web_status_frame.pack(fill='x', padx=10, pady=5)
        
        self.web_status_label = ttk.Label(web_status_frame, 
                                         text="‚ùå –í–µ–±-—Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", 
                                         style='Dark.TLabel')
        self.web_status_label.pack(pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–æ–º
        web_control_frame = ttk.Frame(web_status_frame, style='Dark.TFrame')
        web_control_frame.pack(pady=10)
        
        ttk.Button(web_control_frame, 
                  text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä", 
                  command=self.start_web_server,
                  style='Dark.TButton').pack(side='left', padx=5)
        
        ttk.Button(web_control_frame, 
                  text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä", 
                  command=self.stop_web_server,
                  style='Dark.TButton').pack(side='left', padx=5)
        
        ttk.Button(web_control_frame, 
                  text="üåê –û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ", 
                  command=self.open_web_interface,
                  style='Dark.TButton').pack(side='left', padx=5)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        web_settings_frame = ttk.LabelFrame(web_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞", style='Dark.TFrame')
        web_settings_frame.pack(fill='x', padx=10, pady=5)
        
        # –ü–æ—Ä—Ç
        port_frame = ttk.Frame(web_settings_frame, style='Dark.TFrame')
        port_frame.pack(pady=5)
        
        ttk.Label(port_frame, text="–ü–æ—Ä—Ç:", style='Dark.TLabel').pack(side='left')
        self.port_entry = ttk.Entry(port_frame)
        self.port_entry.insert(0, "5000")
        self.port_entry.pack(side='left', padx=5)
    
    def load_existing_images(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        for image_type in self.current_images.keys():
            self.load_image_for_type(image_type)
    
    def load_image_for_type(self, image_type: str):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞"""
        image_dir = os.path.join(self.images_dir, image_type.replace("_", "/"))
        if os.path.exists(image_dir):
            # –ò—â–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            for file in os.listdir(image_dir):
                if file.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.bmp')):
                    image_path = os.path.join(image_dir, file)
                    self.display_image(image_type, image_path)
                    break
    
    def display_image(self, image_type: str, image_path: str):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –∏–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            img = Image.open(image_path)
            img.thumbnail((200, 200), Image.Resampling.LANCZOS)
            photo = ImageTk.PhotoImage(img)
            
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            img_label = getattr(self, f"{image_type}_img_label")
            img_label.configure(image=photo, text="")
            img_label.image = photo  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            info_label = getattr(self, f"{image_type}_info_label")
            file_size = os.path.getsize(image_path)
            info_text = f"–§–∞–π–ª: {os.path.basename(image_path)}\n–†–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç"
            info_label.configure(text=info_text)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            self.current_images[image_type] = image_path
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
    
    def add_image(self, image_type: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        file_path = filedialog.askopenfilename(
            title=f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {image_type}",
            filetypes=[("Image files", "*.png *.jpg *.jpeg *.gif *.bmp")]
        )
        
        if file_path:
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ –Ω—É–∂–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            target_dir = os.path.join(self.images_dir, image_type.replace("_", "/"))
            target_path = os.path.join(target_dir, os.path.basename(file_path))
            
            try:
                import shutil
                shutil.copy2(file_path, target_path)
                self.display_image(image_type, target_path)
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ/–æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                description = simpledialog.askstring(
                    "–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                    f"–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_type}:",
                    initialvalue=f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {image_type}"
                )
                
                if description:
                    self.save_image_metadata(image_type, target_path, description)
                
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
    
    def change_image(self, image_type: str):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not self.current_images.get(image_type):
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return
        
        self.add_image(image_type)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —á—Ç–æ –∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    
    def delete_image(self, image_type: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not self.current_images.get(image_type):
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–£–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {image_type}?"):
            try:
                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
                os.remove(self.current_images[image_type])
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                img_label = getattr(self, f"{image_type}_img_label")
                img_label.configure(image="", text="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
                img_label.image = None
                
                info_label = getattr(self, f"{image_type}_info_label")
                info_label.configure(text="")
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è
                self.current_images[image_type] = None
                
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
                
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
    
    def save_image_metadata(self, image_type: str, image_path: str, description: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        metadata_file = os.path.join(os.path.dirname(image_path), "metadata.json")
        
        metadata = {}
        if os.path.exists(metadata_file):
            try:
                with open(metadata_file, 'r', encoding='utf-8') as f:
                    metadata = json.load(f)
            except:
                pass
        
        metadata[os.path.basename(image_path)] = {
            "description": description,
            "type": image_type,
            "added_at": datetime.now().isoformat()
        }
        
        try:
            with open(metadata_file, 'w', encoding='utf-8') as f:
                json.dump(metadata, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def start_bot(self):
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
        try:
            if self.bot_process and self.bot_process.poll() is None:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                return
            
            self.bot_process = subprocess.Popen(
                [sys.executable, "main.py"],
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                universal_newlines=True
            )
            
            self.bot_status_label.configure(text="‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
            self.start_bot_btn.configure(state='disabled')
            self.stop_bot_btn.configure(state='normal')
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            threading.Thread(target=self.monitor_bot_logs, daemon=True).start()
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: {e}")
    
    def stop_bot(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞"""
        try:
            if self.bot_process:
                self.bot_process.terminate()
                self.bot_process.wait(timeout=5)
                self.bot_process = None
            
            self.bot_status_label.configure(text="‚ùå –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            self.start_bot_btn.configure(state='normal')
            self.stop_bot_btn.configure(state='disabled')
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞: {e}")
    
    def restart_bot(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
        self.stop_bot()
        time.sleep(2)
        self.start_bot()
    
    def monitor_bot_logs(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –±–æ—Ç–∞"""
        if not self.bot_process:
            return
        
        while self.bot_process and self.bot_process.poll() is None:
            try:
                output = self.bot_process.stdout.readline()
                if output:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å –ª–æ–≥–∞–º–∏
                    self.log_text.insert(tk.END, output)
                    self.log_text.see(tk.END)
                    self.root.update_idletasks()
            except:
                break
    
    def add_admin(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        admin_id = self.admin_id_entry.get().strip()
        if not admin_id:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        try:
            admin_id = int(admin_id)
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            self.admins_listbox.insert(tk.END, f"Admin ID: {admin_id}")
            self.admin_id_entry.delete(0, tk.END)
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} –¥–æ–±–∞–≤–ª–µ–Ω")
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    
    def remove_admin(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        selection = self.admins_listbox.curselection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞?"):
            self.admins_listbox.delete(selection[0])
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω")
    
    def start_web_server(self):
        """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            port = self.port_entry.get() or "5000"
            
            if self.web_process and self.web_process.poll() is None:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–µ–±-—Å–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                return
            
            # –°–æ–∑–¥–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            self.create_web_app()
            
            self.web_process = subprocess.Popen(
                [sys.executable, "web_app.py", "--port", port],
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT
            )
            
            self.web_status_label.configure(text=f"‚úÖ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:{port}")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä: {e}")
    
    def stop_web_server(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            if self.web_process:
                self.web_process.terminate()
                self.web_process.wait(timeout=5)
                self.web_process = None
            
            self.web_status_label.configure(text="‚ùå –í–µ–±-—Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–í–µ–±-—Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä: {e}")
    
    def open_web_interface(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ"""
        port = self.port_entry.get() or "5000"
        url = f"http://localhost:{port}"
        webbrowser.open(url)
    
    def create_web_app(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        web_app_content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è RU–£—á–µ–±–Ω–∏–∫
"""

from flask import Flask, render_template, request, jsonify, send_from_directory
import os
import json
import argparse

app = Flask(__name__)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/images/<path:filename>')
def serve_image(filename):
    return send_from_directory('images', filename)

@app.route('/api/images')
def get_images():
    images = {}
    images_dir = 'images'
    
    if os.path.exists(images_dir):
        for subdir in os.listdir(images_dir):
            subdir_path = os.path.join(images_dir, subdir)
            if os.path.isdir(subdir_path):
                images[subdir] = []
                for file in os.listdir(subdir_path):
                    if file.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.bmp')):
                        images[subdir].append(file)
    
    return jsonify(images)

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--port', type=int, default=5000)
    args = parser.parse_args()
    
    app.run(host='0.0.0.0', port=args.port, debug=True)
'''
        
        if not os.path.exists("web_app.py"):
            with open("web_app.py", 'w', encoding='utf-8') as f:
                f.write(web_app_content)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é templates –∏ –±–∞–∑–æ–≤—ã–π HTML
        if not os.path.exists("templates"):
            os.makedirs("templates")
        
        html_content = '''<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RU–£—á–µ–±–Ω–∏–∫ - –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #f0f0f0; }
        .container { max-width: 1200px; margin: 0 auto; }
        .header { text-align: center; color: #001F3F; margin-bottom: 30px; }
        .section { background: white; padding: 20px; margin: 20px 0; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
        .image-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; }
        .image-item { text-align: center; padding: 15px; border: 1px solid #ddd; border-radius: 8px; }
        .image-item img { max-width: 200px; max-height: 200px; border-radius: 4px; }
        .menu-buttons { display: flex; justify-content: center; gap: 20px; margin: 30px 0; }
        .btn { padding: 15px 30px; background: #4CAF50; color: white; text-decoration: none; border-radius: 5px; font-size: 16px; }
        .btn:hover { background: #45a049; }
        .solver-btn { background: #ff9800; }
        .textbooks-btn { background: #2196F3; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üéì RU–£—á–µ–±–Ω–∏–∫ - –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å</h1>
            <p>–°–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∫–æ–ª—å–Ω—ã–º–∏ —É—á–µ–±–Ω–∏–∫–∞–º–∏</p>
        </div>
        
        <div class="menu-buttons">
            <a href="#" class="btn solver-btn" onclick="showSoon()">üßÆ –†–µ—à–∞—Ç–æ—Ä</a>
            <a href="#textbooks" class="btn textbooks-btn">üìö –£—á–µ–±–Ω–∏–∫–∏</a>
        </div>
        
        <div class="section">
            <h2>üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</h2>
            <p>–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</p>
        </div>
        
        <div class="section">
            <h2>üñºÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏</h2>
            <div id="images-container">
                <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...</p>
            </div>
        </div>
    </div>
    
    <script>
        function showSoon() {
            alert('Soon...');
        }
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        fetch('/api/images')
            .then(response => response.json())
            .then(data => {
                const container = document.getElementById('images-container');
                let html = '<div class="image-grid">';
                
                for (const [category, images] of Object.entries(data)) {
                    if (images.length > 0) {
                        html += `<div class="image-item">
                            <h3>${category.charAt(0).toUpperCase() + category.slice(1)}</h3>`;
                        for (const image of images) {
                            html += `<img src="/images/${category}/${image}" alt="${category}" title="${image}">`;
                        }
                        html += '</div>';
                    }
                }
                
                html += '</div>';
                container.innerHTML = html;
            })
            .catch(error => {
                document.getElementById('images-container').innerHTML = '<p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</p>';
            });
    </script>
</body>
</html>'''
        
        if not os.path.exists("templates/index.html"):
            with open("templates/index.html", 'w', encoding='utf-8') as f:
                f.write(html_content)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.root.mainloop()

if __name__ == "__main__":
    app = RUUchebnikDesktopApp()
    app.run()